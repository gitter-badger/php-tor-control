#!/bin/bash


#~~~~~~~~~~~~~~~~~~~~COPY ME TO /etc/init.d~~~~~~~~~~~~~~~~~~~~~~~~~~#

### BEGIN INIT INFO
# Create dir /var/run/tor and chown debian-tor chmod 700
# Provides:          tor
# Required-Start:    $local_fs $remote_fs $network $named $time
# Required-Stop:     $local_fs $remote_fs $network $named $time
# Should-Start:      $syslog
# Should-Stop:       $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts The Onion Router daemon processes
# Description:       Start The Onion Router, a TCP overlay
#                    network client that provides anonymous
#                    transport.
### END INIT INFO

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
. /lib/lsb/init-functions

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/tor
NAME='tor'
DESC='tor daemon'
TORLOGDIR=/var/log/tor
TORPIDDIR=/etc/tor
TORPID=$TORPIDDIR'/'$2'.pid'
DEFAULTSFILE=/etc/default/$NAME
WAITFORDAEMON=60
DEFAULT_ARGS='--defaults-torrc /etc/tor/torrc'
VERIFY_ARGS='--verify-config'
USE_AA_EXEC=yes
ARGS=''
if [ ${VERBOSE:-} != yes ]; then
	ARGS=$ARGS' --hush'
fi

# Let's try to figure our some sane defaults:
if [ -r /proc/sys/fs/file-max ]; then
	system_max=`cat /proc/sys/fs/file-max`
	if [ $system_max -gt 80000 ] ; then
		MAX_FILEDESCRIPTORS=32768
	elif [ $system_max -gt 40000 ] ; then
		MAX_FILEDESCRIPTORS=16384
	elif [ $system_max -gt 10000 ] ; then
		MAX_FILEDESCRIPTORS=8192
	else
		MAX_FILEDESCRIPTORS=1024
		cat << EOF

Warning: Your system has very few filedescriptors available in total.

Maybe you should try raising that by adding 'fs.file-max=100000' to your
/etc/sysctl.conf file.  Feel free to pick any number that you deem appropriate.
Then run 'sysctl -p'.  See /proc/sys/fs/file-max for the current value, and
file-nr in the same directory for how many of those are used at the moment.

EOF
	fi
else
	MAX_FILEDESCRIPTORS=8192
fi

NICE=''

test -x $DAEMON || exit 0

# Include tor defaults if available
if [ -f $DEFAULTSFILE ] ; then
	. $DEFAULTSFILE
fi

wait_for_deaddaemon () {
	pid=$1
	sleep 1
	if test -n $pid
	then
		if kill -0 $pid 2>/dev/null
		then
			cnt=0
			while kill -0 $pid 2>/dev/null
			do
				cnt=`expr $cnt + 1`
				if [ $cnt -gt $WAITFORDAEMON ]
				then
					echo still running
					exit 1
				fi
				sleep 1
				[ `expr $cnt % 3` != 2 ] || echo ''
			done
		fi
	fi
	echo 0
}


check_torpiddir () {
	if test ! -d $TORPIDDIR; then
		mkdir -m 02750 $TORPIDDIR
		chown debian-tor:debian-tor $TORPIDDIR
		! [ -x /sbin/restorecon ] || /sbin/restorecon $TORPIDDIR
	fi

	if test ! -x $TORPIDDIR; then
		echo cannot access $TORPIDDIR directory, are you root?
		exit 1
	fi
}

check_torlogdir () {
	if test ! -d $TORLOGDIR; then
		mkdir -m 02750 $TORLOGDIR
		chown root:adm $TORLOGDIR
		! [ -x /sbin/restorecon ] || /sbin/restorecon $TORPIDDIR
	fi
}


check_config () {
	if ! $DAEMON $VERIFY_ARGS > /dev/null; then
		echo Checking if $NAME configuration is valid
		$DAEMON $VERIFY_ARGS >&2
		exit 1
	fi
}


execute () {
case $1 in
	start)
		if [ $RUN_DAEMON != yes ];
		then
			echo 'Not starting '$DESC' (Disabled in '$DEFAULTSFILE').'
			return 0
		fi

		#if [ -n $MAX_FILEDESCRIPTORS ]; then
		#	[ ${VERBOSE:-} != yes ] || echo 'Raising maximum number of filedescriptors (ulimit -n) for tor to '$MAX_FILEDESCRIPTORS
		#	if ulimit -n $MAX_FILEDESCRIPTORS ; then
		#		[ ${VERBOSE:-} != yes ] || echo 0
		#	else
		#		[ ${VERBOSE:-} != yes ] || echo 1
		#	fi
		#fi

		#if ! [ -f /var/run/tor ]; then
		#	mkdir -p /var/run/tor -m 700
		#	chown debian-tor:debian-tor /var/run/tor
		#fi

		check_torpiddir
		check_torlogdir
		check_config

		echo Starting $DESC

		if start-stop-daemon --stop --signal 0 --quiet --pidfile $TORPID --exec $DAEMON; then
			echo already running
		else
			if [ $USE_AA_EXEC = yes ] &&
			[ -x /usr/sbin/aa-status ] && \
			[ -x /usr/sbin/aa-exec ] && \
			[ -e /etc/apparmor.d/system_tor ] && \
			/usr/sbin/aa-status --enabled ; then
				AA_EXEC='--startas /usr/sbin/aa-exec'
				AA_EXEC_ARGS='--profile=system_tor -- '$DAEMON
			else
				AA_EXEC=''
				AA_EXEC_ARGS=''
			fi
			if start-stop-daemon --start --pidfile $TORPID --quiet $NICE $AA_EXEC --exec $DAEMON -- $AA_EXEC_ARGS $ARGS
			then
				echo 'daemon is running'
				echo 0
			else
				echo 'Can`t run daemon'
				return 1
			fi
		fi
		;;
	stop)
		echo 'Stopping '$DESC
		pid=`cat $TORPID 2>/dev/null` || true
		if ! [ -f $TORPID ]; then
			echo not running - there is no $TORPID
			return 0
		fi

		if start-stop-daemon --stop --signal INT --quiet --pidfile $TORPID --exec $DAEMON; then
			echo daemon $pid is dead
		elif kill -0 $pid 2>/dev/null; then
			echo Is $pid not $NAME?  Is $DAEMON a different binary now?
			return 1
		else
			echo $DAEMON' died: process '$pid' not running or permission denied'
			return 1
		fi
		;;
	reload|force-reload)
		check_config

		echo Reloading $DESC configuration
		pid=`cat $TORPID 2>/dev/null` || true

		if test ! -f $TORPID -o -z $pid; then
			echo not running - there is no $TORPID
			return 1
		fi

		if start-stop-daemon --stop --signal 1 --quiet --pidfile $TORPID --exec $DAEMON
		then
			echo 0
		elif kill -0 $pid 2>/dev/null; then
			echo Is $pid not $NAME?  Is $DAEMON a different binary now?
			return 1
		else
			echo $DAEMON died: process $pid not running; or permission denied
			return 1
		fi
		;;
	restart)
		check_config

		execute stop
		sleep 1
		execute start
		;;
	status)
		if ! [ -r $(dirname $TORPID) ]; then
			echo cannot read PID file $TORPID
			return 4
		fi
		pid=`cat $TORPID 2>/dev/null` || true
		if ! [ -f $TORPID ]; then
			echo $NAME is not running
			return 3
		fi
		if ps $pid >/dev/null 2>&1; then
			echo $NAME is running
			return 0
		else
			echo $NAME is not running
			return 1
		fi
		;;
	*)
		echo 'Usage: '$0' {start|stop|restart|reload|force-reload|status} >&2'
		return 1
		;;
	esac
}

# --- Multi-instance init ---

config=/etc/tor
arrrgs=$ARGS
command=$1
shift
instances=$*

instances() {
	case $instances in
		'')
			for c in $config/*.cfg
			do
				base=${c##*/}
				test -f $c && echo ${base%.cfg}
			done
			;;
		*)
			echo $instances
			;;
	esac
}

case $command in
	start|stop|restart|reload|force-reload|status)
		highest=0
		for i in $(instances)
		do
			NAME=$i
			DESC=$i
			TORPID=$TORPIDDIR'/'$i'.pid'
			ARGS=$arrrgs' -f '$config'/'$i'.cfg'
			execute $command
			status=$?
			test $status -gt $highest && highest=$status
		done
		exit $highest
		;;
	*)
		execute
		exit 1
		;;
esac